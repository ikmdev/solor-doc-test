<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.1/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.1/sch/docbook.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1">
     <title>Foundational Architecture</title>
    <section>
        <title>Foundational Architecture Challenges</title>
        <para>Integrated Knowledge Management (IKM) will be composed of an integrated clinical
            transformation process to represent and bring together disparate terminology standards
            by using a single model that can encompass any customized content. We understand that
            health IT systems must address the following antipatterns: </para>
        <section>
            <title>Accidental Complexity</title>
            <para>Accidental (or incidental) complexity is complexity that arises in computer
                programs or their development process that is non-essential to the problem to be
                solved. While essential complexity is inherent and unavoidable, accidental
                complexity is caused by the approach chosen to solve the problem. Some examples of
                accidental complexity as they relate to informatics are described in the following
                sections.</para>
            <section>
                <title>Semantic-laden Identifiers</title>
                <para>Solving a distributed identifier allocation problem by using namespaces that
                    are assigned to organizations (or committees in the case of HL7), semantics are
                    often introduced into the identifier, which some developers use to identify what
                    organization created the components that were associated with those identifiers.
                    Exposing derivable semantics in the identifier can lead to complexity when
                    users/developers demand that the semantics be maintained, which may result in
                    unnecessary retirement as described in the next section. Reliance on UUIDs
                    rather than on identifiers with derivable semantics would eliminate this
                    complexity.</para>
            </section>
            <section>
                <title>Unnecessary Retirement</title>
                <para>An unintended side effect of using identified namespaces as part of
                    distributed identifier assignment is an increase in the complexity of
                    transferring responsibility for a component from one organization to another.
                    This complexity includes an elaborate sequence of marking a component for
                    retirement in one release, actually retiring it in a subsequent release, and
                    creating an essentially identical component with an identifier derived from the
                    new organization’s namespace. Furthermore, there is the need for the creation of
                    mapping solutions to keep historical relationships between components retired
                    for these reasons to the current concepts that replace them. Again, reliance on
                    UUIDs rather than on identifiers with derivable semantics would eliminate this
                    complexity.</para>
            </section>
            <section>
                <title>Post-coordination</title>
                <para>Terminology models sometimes make it necessary to require post-coordination to
                    provide domain coverage at the point of care. However, the information models we
                    use in healthcare typically can’t handle post-coordination well. Reliance on the
                    information model to represent post-coordination has introduced complexity that
                    might be avoided if we used a dynamic means to assign unique identifiers to
                    post-coordinated expressions.</para>
            </section>
            <section>
                <title>Accidental Complexity Solutions </title>
                <para>Accidental complexity must be minimized in any good architecture, design, and
                    implementation. Working in short iterations with ongoing design reviews may help
                    reduce accidental complexity. We must also develop an example implementation in
                    parallel with the architecture, so that complexity can be identified early, and
                    evaluated critically with respect to the essential or accidental nature of that
                    complexity.</para>
            </section>
        </section>
        <section>
            <title>Design by Committee</title>
            <para>A project that has many designers involved but no unifying plan or vision.</para>
            <section>
                <title>No Unifying Vision</title>
                <para>Design by committee is the result of having many contributors to a project,
                    but no unifying vision. A complex software design is the product of a committee
                    process. The design has so many features and variations that it is infeasible
                    for any group of developers to realize the specifications in a reasonable time
                    frame.</para>
            </section>
            <section>
                <title>Interoperability at the Expense of Operability</title>
                <para>Interoperability provides an illusion of operability between disparate
                    systems. Therefore, there is no need to standardize.</para>
            </section>
            <section>
                <title>Design by Committee Solutions</title>
                <para>A solution to design by committee is to articulate a set of architectural
                    principles to which architectural components will be evaluated against, and to
                    have the committee be advisory to an architect that provides the unifying
                    vision.</para>
            </section>
        </section>
        <section>
            <title>Stovepipe</title>
            <para>The Stovepipe Enterprise antipattern is characterized by a lack of coordination
                and planning across a set of systems. If every subsystem has a unique interface, the
                system is overly complex. Absence of common multisystem conventions is a key problem
                for systems. For example, currently, essentially no terminology systems are the same
                with regard to their representation and semantics, despite the requirement that they
                must work together.</para>
            <section>
                <title>Overlapping and unreconciled models</title>
                <para>SNOMED CT® and LOINC® are classic examples of two terminologies that are
                    proposed for common use in health IT, but that are not well coordinated, and
                    have unreconciled content (content that is not made consistent or compatible).
                    As an example of unreconciled content, SNOMED CT® and LOINC® both have
                    representations for Amoxicillin. In LOINC®, Amoxicillin is a textual value in
                    the has-component field of the concept:</para>
                <para> </para>
                <para>AMOXICILLIN [MASS/VOLUME] IN SERUM OR PLASMA</para>
                <para>HAS-COMPONENT: AMOXICILLIN</para>
                <para> </para>
                <para>While SNOMED CT® has the concept:</para>
                <para> </para>
                <para>AMOXICILLIN MEASUREMENT (PROCEDURE)</para>
                <para>COMPONENT: AMOXICILLIN (SUBSTANCE)</para>
                <para> </para>
                <para>In SNOMED CT®, Amoxicillin is also a concept, rather than just a text
                    value.</para>
                <para> </para>
                <para>From an end-user’s perspective, the artificial separation and uncoordinated
                    development of these important systems has been a burden. RxNorm may help bridge
                    the medication components of the overlap, but there are other overlapping
                    domains (method, type of scale, system, time aspect, and non-pharmaceutical
                    components) that RxNorm does not cover. The UMLS may help us formally reconcile
                    some of these other domains, but if coordination and reconciliation can be part
                    of the development processes for these sources, rather than a cleanup exercise
                    for implementers, we can allocate resources to solving more compelling
                    problems.</para>
                <para>We hope that the newly announced cooperative agreement between IHTSDO (owners
                    of SNOMED CT®) and the Regenstrief Institute (owners of LOINC®), and the NLM
                    (owners of RxNorm) will change the coordination of these systems in a
                    significantly helpful way. Although SNOMED CT® and LOINC® are classic examples
                    of overlapping and unreconciled models, there are many other examples. The UMLS
                    identifies over 150 sources, most of which are uncoordinated, and have
                    independent models. These overlapping and unreconciled models create an
                    unnecessary burden for the implementer.</para>
            </section>
            <section>
                <title>Uncoordinated development</title>
                <para>Today, related components from different organizations do not share their work
                    prior to a release. The result of this lack of sharing is that dependent
                    components are always out of date with the latest release of the underlying
                    standard. For example, how can you keep a mapping of SNOMED CT® to International
                    Classification of Diseases Tenth Revision Clinical Modification (ICD-10-CM)
                    components up to date, when it takes 6 months after the release of SNOMED CT® to
                    update and quality assure the map? As an implementer, does that mean you should
                    wait 6 months for the map to be updated before deploying the latest SNOMED CT®
                    release? What if the new SNOMED CT® release contains new content that may
                    improve the diagnosis, treatment, or prevention of disease? Is it really
                    acceptable to delay implementation of the latest SNOMED CT® release by 6 months
                    while waiting for dependent system components to be updated after the
                    fact?</para>
            </section>
            <section>
                <title>Stovepipe solutions</title>
                <para>The primary solution for the stovepipe systems we are working with is to break
                    down the barriers that prevent collaborative development of content, tools,
                    processes, and ultimately architecture. Today, deployment delay is not a
                    significant issue because clinical decision support is relatively nascent, and
                    pharmacy, laboratory, and clinical systems are poorly integrated. However, if we
                    successfully create compelling decision support on an integrated and shareable
                    platform, coordination of development and release cycles among clinical
                    terminologies, logical representation, clinical facts, and clinical knowledge
                    bases will become increasingly important. We must prepare for success and work
                    to better coordinate development among dependent components.</para>
                <para>Here we propose leveraging opportunities that are helping to break down these
                    barriers. Those opportunities include acquisition and development of open-source
                    tooling. Improvements in open-source tooling will help break down collaborative
                    barriers significantly. Such improvement is a fundamental focus of our
                    architecture effort. The solution to the stovepipe antipattern is effective
                    collaboration without barriers of proprietary concern.</para>
            </section>
        </section>
    </section>
</chapter>

